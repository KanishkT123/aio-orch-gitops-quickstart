# Refer to: https://github.com/hashicorp/setup-terraform
#
# On a Pull Request that includes changes in the `deploy` directory, run Terraform Plan and append a comment.

name: "CI Pull Request"

on:
  pull_request:
    paths:
      - 'deploy/**'

env:
  RESOURCE_GROUP_NAME: "${{ secrets.RESOURCE_GROUP_NAME }}"
  STORAGE_ACCOUNT_NAME: "${{ secrets.STORAGE_ACCOUNT_NAME }}"
  TFSTATE_CONTAINER_NAME: "${{ secrets.TFSTATE_CONTAINER_NAME }}"
  TFSTATE_KEY: "${{ secrets.TFSTATE_KEY }}"
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  
  TF_VAR_name: "${{ secrets.TF_VAR_NAME }}"
  TF_VAR_location: "${{ secrets.TF_VAR_LOCATION }}"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deploy
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform init
        id: init
        run: |-
          terraform init \
            -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}"
      
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        
      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |-
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }